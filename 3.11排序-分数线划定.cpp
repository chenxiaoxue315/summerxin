/*输入
第一行，两个整数n，m（5 ≤ n ≤ 5000，3 ≤ m ≤ n），中间用一个空格隔开，其中n 表示报名参加笔试的选手总数，m 表示计划录取的志愿者人数。输入数据保证m*150%向下取整后小于等于n。
第二行到第 n+1 行，每行包括两个整数，中间用一个空格隔开，分别是选手的报名号k（1000 ≤ k ≤ 9999）和该选手的笔试成绩s（1 ≤ s ≤ 100）。数据保证选手的报名号各不相同。
输出
第一行，有两个整数，用一个空格隔开，第一个整数表示面试分数线；第二个整数为进入面试的选手的实际人数。
从第二行开始，每行包含两个整数，中间用一个空格隔开，分别表示进入面试的选手的报名号和笔试成绩，按照笔试成绩从高到低输出，如果成绩相同，则按报名号由小到大的顺序输出。
样例输入
6 3
1000 90
3239 88
2390 95
7231 84
1005 95
1001 88
样例输出
88 5
1005 95
2390 95
1000 90
1001 88
3239 88
样例说明：m*150% = 3*150% = 4.5，向下取整后为4。保证4个人进入面试的分数线为88，但因为88有重分，所以所有成绩大于等于88的选手都可以进入面试，故最终有5个人进入面试。*/
//结构体和sort函数排序，再用一个cmp函数定义一下排序的方式
#include<bits/stdc++.h>
using namespace std;
struct fs
{
	int xh;//学号 
	int cj;//成绩 
}a[50005];
bool cmp(fs a,fs b)
{
	if(a.cj!=b.cj)
		return a.cj>b.cj;//成绩不等，用成绩排序 
	return a.xh<b.xh;//成绩相同，用学号排序 
}
int main()
{
	int n,m,count=0;
	scanf("%d %d",&n,&m);
	//找到鄙视分数线的排名位置 
	floor(m*=1.5);//floor(x)返回的是小于或等于x的最大整数。floor(10.5) == 10    floor(-10.5) == -11
	//还有一个函数 ceil(x)返回的是大于x的最小整数 ceil(10.5) == 11    ceil(-10.5) ==-10

	for(int i=1;i<=n;i++)//读入学号和成绩 
		scanf("%d %d",&a[i].xh,&a[i].cj);
		
	sort(a+1,a+n+1,cmp);
	for(int i=1;i<=n;i++)
		if(a[i].cj>=a[m].cj)
			count++;
	printf("%d %d\n",a[m].cj,count);
	
	for(int i=1;i<=count;i++)
		printf("%d %d\n",a[i].xh,a[i].cj);
	return 0;
}

