//康托展开
//X=a[n]*(n-1)!+a[n-1]*(n-2)!+...+a[i]*(i-1)!+...+a[1]*0! ，
//其中a[i]为当前未出现的元素中是排在第几个（从0开始）。
/*如 {1,2,3} 按从小到大排列一共6个。123 132 213 231 312 321 
我想知道321是{1,2,3}中第几个小的数可以这样考虑 ：
第一位是3，当第一位的数小于3时，那排列数小于321,小于3的数有1、2 。所以有2*2!个。
再看小于第二位2的：小于2的数只有一个就是1 ，所以有1*1!=1 
所以小于321的{1,2,3}排列数有2*2!+1*1!=5个。所以321是第6个小的数。 
即6=2*2!+1*1!+0*0!就是康托展开*/
//返回数组a中当下顺序的康托映射
int cantor(int a[], int n)//n为数组的长度
{
	int ans=0;
	for(int i=0;i<n;i++)
	{
		int x=0;//x用于记录公式前面的a[i]
		int c=1, m=1;//m记录后面的阶乘，c
		for(int j=i+1;j<n;j++)
		{
			if(a[j]<a[i]) //计算这个数a[i] 
				x++;
			m*=c; //计算(i-1)! 
			c++;
		}
		ans+=x*m;
	}
	return ans;
}



